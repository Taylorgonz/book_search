{"version":3,"sources":["components/nav.js","components/save.js","utils/api.js","components/search.js","App.js","registerServiceWorker.js","index.js"],"names":["Nav","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Saved","postData","axios","post","Search","useState","books","setBooks","search","setSearch","class","value","onChange","event","target","get","then","result","data","items","map","book","index","key","volumeInfo","imageLinks","src","thumbnail","alt","title","readOnly","description","infoLink","onClick","API","e","author","authors","image","link","console","log","App","exact","path","component","saved","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.74621472.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Nav() {\n\n    return (\n        <div>\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <a className=\"navBar navbar-brand \" href=\"#\">Book Search</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n                    <div className=\"navbar-nav\">\n                        <a className=\"nav-item nav-link\" href=\"/saved\">Saved</a>\n                        <a className=\"nav-item nav-link\" href=\"/search\">Search</a>\n                    </div>\n                </div>\n            </nav>\n            <div className=\"text-center jumbotron\">\n                <h2>Google Book Search</h2>\n                <h3>Search for and Save Books you Like!</h3>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Nav;","import React from \"react\";\n\nfunction Saved() {\n\n\n\n    return (\n        <div>\n\n        </div>\n    )\n}\n\nexport default Saved;","import axios from \"axios\";\nimport Axios from \"axios\";\nconst apiKey = \"AIzaSyCt1rfcVmMgd_zKGCFIs6YZ9iny9cIfV-Y\"\n\nexport default {\n\n    getBooks: function (books) {\n        return Axios.get(`https://www.googleapis.com/books/v1/search?q=harrypotter&key=${apiKey}`)\n    },\n\n    saveBook: function(postData) {\n        axios.post('api/books', postData);\n    },\n    \n    getDbBooks: function () {\n        axios.get(\"api/book\")\n    }\n    \n}","import React, { useState, useEffect } from \"react\";\nimport API from \"../utils/api\";\nimport axios from 'axios'\nimport { set } from \"mongoose\";\nconst key = \"AIzaSyCt1rfcVmMgd_zKGCFIs6YZ9iny9cIfV-Y\"\n\n\nfunction Search() {\n\n    const [books, setBooks] = useState(\"\");\n    const [search, setSearch] = useState(\"\")\n\n\n    const getBooks = () => {\n\n        axios.get(`https://www.googleapis.com/books/v1/volumes?q=${search}&key=${key}`)\n            .then(result => {\n                setBooks(result.data.items)\n            })\n    }\n\n    const saveBook = (e) => {\n        API.saveBook({\n            title: e.volumeInfo.title,\n            author: e.volumeInfo.authors[0],\n            description: e.volumeInfo.description,\n            image: e.volumeInfo.imageLinks.thumbnail,\n            link: e.volumeInfo.infoLink\n\n        })\n        console.log(e.volumeInfo)\n    }\n\n    // console.log(books);\n\n\n\n    return (\n        <div className=\"container-fluid\">\n            <div class=\"row\">\n                <div class=\"searchInput col-12\">\n                    <label className=\"search\"> Search</label>\n                    <input className=\"searchBar\" type=\"text\" value={search} onChange={(event) => {\n                        setSearch(event.target.value)\n                        getBooks()\n                    }} />\n                </div>\n            </div>\n            <div className=\"searchResponse row d-flex justify-content-center\">\n                {books &&\n                    books.map((book, index) => (\n\n\n                        <div key={index} className=\"card displayCard m-30 col-s-12 col-md-2 \" >\n                            {book.volumeInfo.imageLinks  ? <img className=\"card-img-top cardImage\" src={book.volumeInfo.imageLinks.thumbnail} alt=\"Card image cap\" />\n                            : <img className=\"card-img-top cardImage\" src=\"http://static1.squarespace.com/static/52f29ad2e4b02d1f9d476561/5390b6b6e4b052006822dd29/5390b747e4b06374d7eb79fb/1401993081305/noCoverArt.gif?format=1500w\" alt=\"Card image cap\" />\n                            }\n                            \n                            <div className=\"card-body\">\n                                <h5 className=\"card-title text-center cardTitle\">{book.volumeInfo.title}</h5>\n                                <textarea readOnly={true} className=\"card-text\">{book.volumeInfo.description}</textarea>\n                                <div className=\"d-flex justify-content-center\">\n                                    <a href={book.volumeInfo.infoLink} target=\"_blank\" className=\"btn btn-link\">More info!</a>\n                                    <button className=\"btn btn-success\" onClick={() => saveBook(book)}> Save!</button>\n                                </div>\n                            </div>\n                        </div>\n                    ))\n                }\n            </div>\n\n\n\n        </div>\n    )\n}\n\nexport default Search;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\nimport Nav from './components/nav';\nimport saved from './components/save';\nimport search from './components/search';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Nav/>\n        <Route exact path=\"/\" component={saved}/>\n        <Route exact path=\"/saved\" component={saved}/>\n        <Route exact path=\"/search\" component={search}/>\n      </div>\n    </Router>\n  );\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}